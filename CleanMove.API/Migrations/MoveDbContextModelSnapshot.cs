// <auto-generated />
using System;
using CleanMove.Infrustructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanMove.API.Migrations
{
    [DbContext(typeof(MoveDbContext))]
    partial class MoveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanMove.Domain.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RantalId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("RantalId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("CleanMove.Domain.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Movie_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rantal_Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rantal_Duration")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CleanMove.Domain.MovieRantal", b =>
                {
                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("RantalId")
                        .HasColumnType("int");

                    b.HasKey("RentalId", "MovieId");

                    b.HasIndex("MovieId");

                    b.HasIndex("RantalId");

                    b.ToTable("MovieRantals");
                });

            modelBuilder.Entity("CleanMove.Domain.Rantal", b =>
                {
                    b.Property<int>("RantalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RantalId"));

                    b.Property<DateTime>("RantalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RantalExpiry")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RantalId");

                    b.ToTable("Rantals");
                });

            modelBuilder.Entity("CleanMove.Domain.Member", b =>
                {
                    b.HasOne("CleanMove.Domain.Rantal", "Rantal")
                        .WithMany("Members")
                        .HasForeignKey("RantalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rantal");
                });

            modelBuilder.Entity("CleanMove.Domain.MovieRantal", b =>
                {
                    b.HasOne("CleanMove.Domain.Movie", null)
                        .WithMany("MovieRantals")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMove.Domain.Rantal", null)
                        .WithMany("MovieRantals")
                        .HasForeignKey("RantalId");
                });

            modelBuilder.Entity("CleanMove.Domain.Movie", b =>
                {
                    b.Navigation("MovieRantals");
                });

            modelBuilder.Entity("CleanMove.Domain.Rantal", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("MovieRantals");
                });
#pragma warning restore 612, 618
        }
    }
}
